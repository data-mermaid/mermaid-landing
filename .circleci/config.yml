# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  deploy:
    docker:
      - image: circleci/php:8.0-node-browsers

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # Install PHP vendors
      - run: composer install -n --prefer-dist

      # Save vendors
      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}

      # Install NPM packages for frontend things
      - run: npm install

      # Save packages
      - save_cache:
          key: node-v3-{{ checksum "package.json" }}
          paths:
            - node_modules
            - ~/.yarn

      # run tests!
      # - run: phpunit

      # Install software required to run EB deployer
      - run:
          name: Installing deployment dependencies
          working_directory: ~/repo
          command: |
            sudo apt-get -y -qq update
            sudo apt-get install python3-pip python3-dev build-essential
            sudo pip3 install "urllib3<1.23,>=1.21.1" awsebcli --upgrade
      # Build css and js (prod script builds these. you should make your own)
      - run:
          name: Install Node modules
          working_directory: ~/repo
          command: npm run prod

      - run:
          name: Setup Environment Variables
          command: |
            cp .env.example .env
            echo -e "APP_URL=$APP_URL" >> .env
            echo -e "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> .env
            echo -e "AWS_BUCKET=$AWS_BUCKET" >> .env
            echo -e "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> .env
            echo -e "CAPTCHA_SECRET=$CAPTCHA_SECRET" >> .env
            echo -e "CAPTCHA_SITEKEY=$CAPTCHA_SITEKEY" >> .env
            echo -e "CHANGELOG_PATH=$CHANGELOG_PATH" >> .env
            echo -e "CHANGELOG_URL=$CHANGELOG_URL" >> .env
            echo -e "DB_DATABASE=$DB_DATABASE" >> .env
            echo -e "DB_DATABASE_2=$DB_DATABASE_2" >> .env
            echo -e "DB_HOST=$DB_HOST" >> .env
            echo -e "DB_HOST_2=$DB_HOST_2" >> .env
            echo -e "DB_PASSWORD=$DB_PASSWORD" >> .env
            echo -e "DB_PASSWORD_2=$DB_PASSWORD_2" >> .env
            echo -e "DB_USERNAME=$DB_USERNAME" >> .env
            echo -e "DB_USERNAME_2=$DB_USERNAME_2" >> .env
            echo -e "EB_ENV_NAME=$EB_ENV_NAME" >> .env
            echo -e "MAIL_HOST=$MAIL_HOST" >> .env
            echo -e "MAIL_PASSWORD=$MAIL_PASSWORD" >> .env
            echo -e "MAIL_PORT=$MAIL_PORT" >> .env
            echo -e "MAIL_USERNAME=$MAIL_USERNAME" >> .env
            echo -e "TINYMCE_CLOUD_APIKEY=$TINYMCE_CLOUD_APIKEY" >> .env

      - run:
          name: "Linking storage from filesystem"
          command: php artisan storage:link

      - run:
          name: "Mount latest content from cloud"
          command: php artisan mount:content

      # Adjust file permission
      - run:
          name: "Adjust necessary dir/file permission"
          command: sudo chmod -R 0777 storage bootstrap public/assets content

      # Add everything (except vendors that will be installed automatically and node_modules that are not needed because we already built js and css) to a ZIP
      - run:
          name: ZIP project
          working_directory: ~/repo
          command: zip main.zip -r * .[^.]* --exclude=vendor/* --exclude=node_modules/* --exclude=.circleci/* --exclude=.elasticbeanstalk/*

      # Run EB deploy
      - run:
          name: Deploying
          command: eb deploy --staged $EB_ENV_NAME

workflows:
  version: 2
  build:
    jobs:
      - deploy:
          filters:
            branches:
              only:
                - main
